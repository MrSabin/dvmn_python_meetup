import datetime
import locale
import os
import sqlite3

import telegram
from dotenv import load_dotenv
from telegram import InlineKeyboardButton, InlineKeyboardMarkup, update
from telegram.ext import (CallbackQueryHandler, CommandHandler,
                          ConversationHandler, Updater)
from utils import db_to_json

# locale.setlocale(locale.LC_ALL, "ru")
bot_db_speaker = [(1, '–ø–∞—Ä—Ç–Ω–µ—Ä, Data Insight, –í–∏—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç IBF', 
                   '–§—ë–¥–æ—Ä –§–µ–¥–æ—Ä–æ–≤', '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', None, 
                   '171951902'), 
                   (2, '–∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, FMNT', '–î–µ–Ω–∏—Å –î–µ–Ω–∏—Å–æ–≤', 
                   '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', None, '171951902'), 
                   (3, '–ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –†–æ—Å—Å–∏—è –í–ø–µ—Ä–µ–¥', '–ë–æ—Ä–∏—Å –ë–æ—Ä–∏—Å–æ–≤', 
                   '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', None, '171951902')]

bot_db_program = [(1, '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '09:00 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è', '09:00-10:00 –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'), 
                  (2, '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '10:00 –î–∏—Å–∫—É—Å—Å–∏—è - –ü—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏', 
                  '''10:00 ‚Äì 11:30 –ü–ª–∞–Ω–µ—Ä–Ω–∞—è –¥–∏—Å–∫—É—Å—Å–∏—è ‚Äì –ø—É—Ç–∏ —Ä–∞–∑–≤–∏—Ç–∏—è —Ä—ã–Ω–∫–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏.    
                  –ú–æ–¥–µ—Ä–∞—Ç–æ—Ä: –ò–≤–∞–Ω–æ–≤ –ò–≤–∞–Ω –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫—Å–ø–µ—Ä—Ç    –†—ã–Ω–æ–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–π —Ä–µ–∫–ª–∞–º—ã –≤ –†–æ—Å—Å–∏–∏.  
                  –§—ë–¥–æ—Ä –§–µ–¥–æ—Ä–æ–≤, –ø–∞—Ä—Ç–Ω–µ—Ä, Data Insight, –í–∏—Ü–µ-–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç IBF    
                  –û—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –≤—Å–µ–π –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏.  
                  –î–µ–Ω–∏—Å –î–µ–Ω–∏—Å–æ–≤, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, 
                  FMNT    –¢—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ü–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏—è IT  –ë–æ—Ä–∏—Å –ë–æ—Ä–∏—Å–æ–≤, 
                  –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç, –†–æ—Å—Å–∏—è –í–ø–µ—Ä–µ–¥    
                  –≠–ö–°–ü–ï–†–¢–´ –°–ï–°–°–ò–ò:  –í–∏—Ç–∞–ª–∏–π –í–∏—Ç–∞–ª—å–µ–≤, –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —ç–∫—Å–ø–µ—Ä—Ç  
                  –°–µ—Ä–≥–µ–π –°–µ—Ä–≥–µ–µ–≤, –∑–∞–º–µ—Å—Ç–∏—Ç–µ–ª—å –≥–µ–Ω–µ—Ä–∞–ª—å–Ω–æ–≥–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∞, 2F  –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω–æ–≤, –µ–≤–∞–Ω–≥–µ–ª–∏—Å—Ç, Birma'''), 
                  (3, '–í—Å—Ç—É–ø–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è', '11:30 –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥', 
                  '11:30 ‚Äì 12:00 –ü–µ—Ä–µ—Ä—ã–≤, –ù–µ—Ç–≤–æ—Ä–∫–∏–Ω–≥, —É—á–∞—Å—Ç–∏–µ –≤ –∑–æ–Ω–µ —ç–∫—Å–º–ø–æ')]                   

load_dotenv()
TG_TOKEN = os.environ.get("TG_TOKEN")

# Keyboards_functions #
def start(update, context):
    update.message.reply_text(
        main_menu_message(),
        reply_markup=main_menu_keyboard()
    )


def main_menu(update, context):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text=main_menu_message(),
        reply_markup=main_menu_keyboard()
    )


def programm_menu(update, context):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
        text=program_message(),
        reply_markup=programm_keyboard()
    )


def ask_menu(update,context):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
                          reply_markup=ask_keyboard())


def sub_programm_menu(bot, update):
    query = bot.callback_query
    query.answer()
    query.edit_message_text(
        text=sub_program_message(),
        reply_markup=sub_programm_keyboard()
    )


def sub_ask_menu(bot, update):
    query = update.callback_query
    query.answer()
    query.edit_message_text(
                          reply_markup=sub_ask_keyboard())


############################ Keyboards #########################################
def main_menu_keyboard():
    keyboard = [
            [
                InlineKeyboardButton("–ü—Ä–æ–≥—Ä–∞–º–º–∞", callback_data="prog_1"),
                InlineKeyboardButton('–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å', callback_data="ask_1"),
            ]
        ]
    return InlineKeyboardMarkup(keyboard)


def programm_keyboard():
    db_answer = db_to_json("SELECT DISTINCT top_block FROM bot_db_program")
    keyboard = [[InlineKeyboardButton(block, callback_data=f'prog_2_{num}') for num, block in enumerate(db_answer)]]
    return InlineKeyboardMarkup(keyboard)


def ask_keyboard():
    themes = []
    for program in bot_db_program:
        if program[1] not in themes:
            themes.append(program[1])
    keyboard = [[InlineKeyboardButton(theme, callback_data=f'ask_2_{num}') for num,theme in enumerate(themes)]]
    return InlineKeyboardMarkup(keyboard)


def sub_programm_keyboard():
    keyboard = [[InlineKeyboardButton('Submenu 2-1', callback_data='prog_3_1')],
                [InlineKeyboardButton('Submenu 2-2', callback_data='prog_3_2')],
                [InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')]]
    return InlineKeyboardMarkup(keyboard)


def sub_ask_keyboard():
    keyboard = [[InlineKeyboardButton('Submenu 2-1', callback_data='ask_3_1')],
                [InlineKeyboardButton('Submenu 2-2', callback_data='ask_3_2')],
                [InlineKeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')]]
    return InlineKeyboardMarkup(keyboard)

# Messages #


def main_menu_message():
    return '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ. –≠—Ç–æ –æ—Ñ–∏—Ü–∏–∞–ª—å–Ω—ã–π –±–æ—Ç –ø–æ –ø–æ–¥–¥–µ—Ä–∂–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ ü§ñ.'


def program_message():
    return "–í—ã–±–µ—Ä–∏—Ç–µ –±–ª–æ–∫ –ø—Ä–æ–≥—Ä–∞–º–º—ã:"


def sub_program_message():
    return "–í—ã–±–µ—Ä–∏—Ç–µ –≤—Ä–µ–º—è:"


def main():
    updater = Updater(TG_TOKEN, use_context=True)
    updater.dispatcher.add_handler(CommandHandler('start', start))
    updater.dispatcher.add_handler(CallbackQueryHandler(main_menu, pattern='main'))
    updater.dispatcher.add_handler(CallbackQueryHandler(programm_menu, pattern='prog_1'))
    updater.dispatcher.add_handler(CallbackQueryHandler(ask_menu, pattern='ask_1'))
    updater.dispatcher.add_handler(CallbackQueryHandler(sub_programm_menu,
                                                        pattern='prog_2'))
    updater.dispatcher.add_handler(CallbackQueryHandler(sub_ask_menu,
                                                        pattern='ask_2'))
    updater.start_polling()
    updater.idle()

if __name__ == "__main__":
    main()
